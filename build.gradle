plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '10.0.0'
    id 'io.gatling.gradle' version '3.11.5.2'
    id 'org.owasp.dependencycheck' version '10.0.4'
    id 'org.sonarqube' version '5.1.0.4882'
}

// MANDATORY: Gradle version check for Java 24 compatibility
task checkGradleVersion {
    doFirst {
        def currentVersion = gradle.gradleVersion
        def requiredVersion = "8.14"
        
        if (compareVersions(currentVersion, requiredVersion) < 0) {
            throw new GradleException(
                "Java 24 requires Gradle ${requiredVersion}+ but found ${currentVersion}. " +
                "Please upgrade Gradle wrapper to 8.14+ or 9.0+ for full Java 24 support."
            )
        }
        println "✅ Gradle ${currentVersion} supports Java 24"
    }
}

def compareVersions(String version1, String version2) {
    List<String> parts1 = version1.tokenize('.')
    List<String> parts2 = version2.tokenize('.')
    int maxLength = Math.max(parts1.size(), parts2.size())
    
    for (int i = 0; i < maxLength; i++) {
        int v1 = i < parts1.size() ? Integer.parseInt(parts1[i]) : 0
        int v2 = i < parts2.size() ? Integer.parseInt(parts2[i]) : 0
        if (v1 != v2) return Integer.compare(v1, v2)
    }
    return 0
}

// Ensure version check runs before compilation
compileJava.dependsOn checkGradleVersion

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.0"
    }
}

dependencies {
    // TradeMaster Common Service Library - Shared components across microservices
    implementation project(':trademaster-common-service-lib')

    // Spring Boot MVC with Virtual Threads for high-performance blocking I/O
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // HashiCorp Vault for secrets management
    implementation 'org.springframework.vault:spring-vault-core:3.1.0'
    
    // PostgreSQL driver for standard JDBC access
    implementation 'org.postgresql:postgresql'
    
    // Flyway for database migrations
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    
    // JSON Web Token support
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    
    // Service Discovery and Configuration with Consul
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    implementation 'org.springframework.cloud:spring-cloud-starter-consul-config'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    
    // Note: No longer using separate Spring Cloud Config Server
    
    // Circuit Breaker with Resilience4j
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    
    // OpenFeign for service-to-service communication
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    
    // Kafka for event streaming
    implementation 'org.springframework.kafka:spring-kafka'
    
    // WebSocket for real-time updates
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    
    // HTTP Clients for broker APIs - Using OkHttp exclusively for better Virtual Thread compatibility
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    
    // Apache HTTP Client 4.x explicitly for Consul compatibility (Spring Cloud Consul requires this)
    implementation 'org.apache.httpcomponents:httpclient:4.5.14'
    implementation 'org.apache.httpcomponents:httpcore:4.4.16'
    
    // ✅ HTTP CLIENT CONNECTION POOLING (MANDATORY) - Apache HttpClient 5.x for modern connection pooling
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.4.1'
    implementation 'org.apache.httpcomponents.core5:httpcore5:5.3.1'
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // Monitoring & Observability
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    
    // Structured Logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    implementation 'org.codehaus.janino:janino:3.1.12'
    
    // Rate Limiting
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-redis:7.6.0'
    
    // Circuit Breaker (Resilience4j)
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-timelimiter:2.1.0'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.google.guava:guava:33.0.0-jre'
    
    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // Lombok for reducing boilerplate (Java 24 compatible version)
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.wiremock:wiremock-standalone:3.2.0'
    testImplementation 'com.h2database:h2'
    
    // Test runtime
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // Gatling for load testing
    gatling 'io.gatling.highcharts:gatling-charts-highcharts:3.11.5'
    gatling 'io.gatling:gatling-app:3.11.5'
    gatling 'io.gatling:gatling-recorder:3.11.5'
}

// MANDATORY: Java 24 Preview Features per TradeMaster Standards
tasks.named('compileJava') {
    options.compilerArgs += ['--enable-preview']
}

tasks.named('compileTestJava') {
    options.compilerArgs += ['--enable-preview']
}

tasks.named('test') {
    jvmArgs += ['--enable-preview']
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += ['--enable-preview']
}

// Boot run configuration
bootRun {
    jvmArgs = [
        "-Dspring.threads.virtual.enabled=true",
        "--enable-preview"
    ]
}

tasks.named('compileJava') {
    options.compilerArgs += ['--enable-preview']
}

// Flyway configuration
flyway {
    url = 'jdbc:postgresql://localhost:5432/trademaster_trading'
    user = 'trademaster_user'
    password = 'trademaster_password'
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
    validateOnMigrate = true
}

// Gatling configuration for load testing (simplified for newer plugin version)
// Run gatling tests with: ./gradlew gatlingRun
// Configuration is handled via plugin defaults


// Spring Boot configuration
springBoot {
    mainClass = 'com.trademaster.trading.TradingServiceApplication'
    buildInfo()
}

// Custom tasks
task setupDatabase {
    group = 'database'
    description = 'Sets up the PostgreSQL database for trading service'
    doLast {
        println "Database setup completed. Run 'gradle flywayMigrate' to apply migrations."
    }
}

task setupKafkaTopics {
    group = 'messaging'
    description = 'Creates Kafka topics for trading events'
    doLast {
        println "Kafka topics setup completed. Trading event topics created."
    }
}

// OWASP Dependency Check configuration for security vulnerability scanning
dependencyCheck {
    // Output formats
    formats = ['HTML', 'JSON', 'XML']

    // Fail build on CVSS score threshold
    failBuildOnCVSS = 7.0 // Fail on High/Critical vulnerabilities

    // Suppress false positives (create suppression.xml if needed)
    if (file('owasp-dependency-check-suppressions.xml').exists()) {
        suppressionFile = file('owasp-dependency-check-suppressions.xml')
    }

    // Analyzers configuration
    analyzers {
        assemblyEnabled = false // .NET assemblies not used
        nodeEnabled = false // Node.js not used
    }
}

// SonarQube configuration for code quality and security analysis
sonarqube {
    properties {
        property 'sonar.projectKey', 'trademaster-trading-service'
        property 'sonar.projectName', 'TradeMaster Trading Service'
        property 'sonar.host.url', System.getenv('SONAR_HOST_URL') ?: 'http://localhost:9000'
        property 'sonar.token', System.getenv('SONAR_TOKEN') ?: ''

        // Source and binary directories
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.java.binaries', 'build/classes/java/main'

        // Coverage report
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'

        // Code quality gates
        property 'sonar.qualitygate.wait', 'true'

        // Security-specific properties
        property 'sonar.java.spotbugs.reportPaths', 'build/reports/spotbugs/main.xml'
    }
}

// Security scanning task - runs all security checks
task securityScan {
    group = 'security'
    description = 'Runs comprehensive security scanning (OWASP Dependency Check + SonarQube)'
    dependsOn dependencyCheckAnalyze, sonarqube

    doLast {
        println """
        =====================================
        Security Scan Complete
        =====================================
        Reports generated:
        - OWASP Dependency Check: build/reports/dependency-check-report.html
        - SonarQube: ${sonarqube.properties['sonar.host.url']}/dashboard?id=trademaster-trading-service

        Review reports for security vulnerabilities and code quality issues.
        =====================================
        """.stripIndent()
    }
}