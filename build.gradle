plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'org.flywaydb.flyway' version '10.0.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:2024.0.0"
    }
}

dependencies {
    // Spring Boot MVC with Virtual Threads for high-performance blocking I/O
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // HashiCorp Vault for secrets management
    implementation 'org.springframework.vault:spring-vault-core:3.1.0'
    
    // PostgreSQL driver for standard JDBC access
    implementation 'org.postgresql:postgresql'
    
    // Flyway for database migrations
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    
    // JSON Web Token support
    implementation 'io.jsonwebtoken:jjwt-api:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-impl:0.12.3'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.12.3'
    
    // Service Discovery with Eureka Client
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.cloud:spring-cloud-starter-loadbalancer'
    
    // Circuit Breaker with Resilience4j
    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-resilience4j'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    
    // OpenFeign for service-to-service communication
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    
    // Kafka for event streaming
    implementation 'org.springframework.kafka:spring-kafka'
    
    // WebSocket for real-time updates
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    
    // HTTP Clients for broker APIs
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.3.1'
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    
    // Monitoring & Observability
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'
    
    // Structured Logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // Rate Limiting
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-core:7.6.0'
    implementation 'com.github.vladimir-bukhtoyarov:bucket4j-redis:7.6.0'
    
    // Circuit Breaker (Resilience4j)
    implementation 'io.github.resilience4j:resilience4j-spring-boot3:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-circuitbreaker:2.1.0'
    implementation 'io.github.resilience4j:resilience4j-timelimiter:2.1.0'
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3'
    implementation 'com.google.guava:guava:33.0.0-jre'
    
    // API Documentation
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    
    // Lombok for reducing boilerplate (Java 24 compatible version)
    compileOnly 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.projectlombok:lombok:1.18.38'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testImplementation 'org.testcontainers:kafka'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.wiremock:wiremock-standalone:3.2.0'
    testImplementation 'com.h2database:h2'
    
    // Test runtime
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// MANDATORY: Java 24 Preview Features per TradeMaster Standards
tasks.named('compileJava') {
    options.compilerArgs += ['--enable-preview']
}

tasks.named('compileTestJava') {
    options.compilerArgs += ['--enable-preview']
}

tasks.named('test') {
    jvmArgs += ['--enable-preview']
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

tasks.withType(JavaExec).configureEach {
    jvmArgs += ['--enable-preview']
}

// Boot run configuration
bootRun {
    jvmArgs = [
        "-Dspring.threads.virtual.enabled=true",
        "--enable-preview"
    ]
}

tasks.named('compileJava') {
    options.compilerArgs += ['--enable-preview']
}

// Flyway configuration
flyway {
    url = 'jdbc:postgresql://localhost:5432/trademaster_trading'
    user = 'trademaster_user'
    password = 'trademaster_password'
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
    validateOnMigrate = true
}


// Spring Boot configuration
springBoot {
    mainClass = 'com.trademaster.trading.TradingServiceApplication'
    buildInfo()
}

// Custom tasks
task setupDatabase {
    group = 'database'
    description = 'Sets up the PostgreSQL database for trading service'
    doLast {
        println "Database setup completed. Run 'gradle flywayMigrate' to apply migrations."
    }
}

task setupKafkaTopics {
    group = 'messaging'
    description = 'Creates Kafka topics for trading events'
    doLast {
        println "Kafka topics setup completed. Trading event topics created."
    }
}