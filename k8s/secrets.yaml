# TradeMaster Trading Service - Kubernetes Secrets
# WARNING: These are template secrets for development only
# In production, use external secret management (HashiCorp Vault, AWS Secrets Manager, etc.)

apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: trademaster
  labels:
    app: postgres
type: Opaque
data:
  username: dHJhZGVtYXN0ZXJfdXNlcg==  # base64: trademaster_user
  password: dHJhZGVtYXN0ZXJfc2VjdXJlX3Bhc3M=  # base64: trademaster_secure_pass
  database: dHJhZGVtYXN0ZXJfdHJhZGluZw==  # base64: trademaster_trading
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: trademaster
  labels:
    app: redis
type: Opaque
data:
  password: cmVkaXNfc2VjdXJlX3Bhc3M=  # base64: redis_secure_pass
---
apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: trademaster
  labels:
    app: trading-service
type: Opaque
data:
  # base64 encoded 256-bit secret key for JWT signing
  secret: dHJhZGVtYXN0ZXItand0LXNlY3JldC0yNTYtYml0LWtleS1mb3ItcHJvZHVjdGlvbi11c2UtaGFzaGljb3JwLXZhdWx0LW9yLWF3cy1zZWNyZXRzLW1hbmFnZXI=
---
apiVersion: v1
kind: Secret
metadata:
  name: vault-secret
  namespace: trademaster
  labels:
    app: vault
type: Opaque
data:
  token: dmF1bHRfcHJvZF90b2tlbl9zZWN1cmU=  # base64: vault_prod_token_secure
  root-token: dmF1bHRfcm9vdF90b2tlbl9wcm9kdWN0aW9u  # base64: vault_root_token_production
---
apiVersion: v1
kind: Secret
metadata:
  name: ssl-certs
  namespace: trademaster
  labels:
    app: trading-service
type: kubernetes.io/tls
data:
  # These should be replaced with actual SSL certificates
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUM2akNDQWRLZ0F3SUJBZ0lCQVRBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkMGNtRmtaVzFoYzNSbGNqQWVGdzB5TkRBMU1qZ3hNek16TlRCYUZ3MDBOVEExTWpneE16TXpOVEJhTUJJeEVEQU9CZ05WQkFNVEIzUnlZV1JsYldGemRHVnlNSUlCSWpBTkJna3Foa2lHOXcwQkFRRUZBQU9DQVE4QU1JSUJDZ0tDQVFFQXFxcXF5VVNVZFR5aER5VTJYbzR0b0M5VnVxVE1XTUNxaE9rdWpwVzU1aEF3ZjRhTzF0VHNDemhVQWFrZ3czMzMx
  tls.key: |
    LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2QUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktZd2dnU2lBZ0VBQW9JQkFRQ3FxcXF5VVNVZFR5aER5VTJYbzR0b0M5VnVxVE1XTUNxaE9rdWpwVzU1aEF3ZjRhTzF0VHNDemhVQWFrZ3czMzMxNWFmbmEzMzNKUUs5SGdwM3gxMzNJWXNHMzMzNTVHYW5NMzMzSktYUzMzMzMzcjMzMzMzNFUzMzNhMzMzMzNJMzMzMzMzNEczMzMzNFEzMzMzNkgzMzMzMzNSMzMzMzMzWUEzMzMzMzN4MzMzMzM=
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secret
  namespace: trademaster
  labels:
    app: grafana
type: Opaque
data:
  admin-user: YWRtaW4=  # base64: admin
  admin-password: Z3JhZmFuYV9zZWN1cmVfcGFzcw==  # base64: grafana_secure_pass
---
# External Secrets Operator configuration (for production)
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-secret-store
  namespace: trademaster
spec:
  provider:
    vault:
      server: "https://vault.trademaster.internal:8200"
      path: "secret"
      version: "v2"
      auth:
        kubernetes:
          mountPath: "kubernetes"
          role: "trading-service"
          serviceAccountRef:
            name: "trading-service-account"
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: trading-service-secrets
  namespace: trademaster
spec:
  refreshInterval: 300s  # 5 minutes
  secretStoreRef:
    name: vault-secret-store
    kind: SecretStore
  target:
    name: trading-service-external-secrets
    creationPolicy: Owner
  data:
  - secretKey: postgres-password
    remoteRef:
      key: database/postgres
      property: password
  - secretKey: redis-password
    remoteRef:
      key: cache/redis
      property: password
  - secretKey: jwt-secret
    remoteRef:
      key: auth/jwt
      property: secret
  - secretKey: broker-api-keys
    remoteRef:
      key: trading/brokers
      property: api-keys