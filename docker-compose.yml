version: '3.8'

# TradeMaster Trading Service - Production Docker Compose
# Complete infrastructure stack with monitoring, security, and scalability
services:
  # PostgreSQL Database with performance optimization
  postgres:
    image: postgres:16-alpine
    container_name: trademaster-postgres
    environment:
      POSTGRES_DB: trademaster_trading
      POSTGRES_USER: trademaster_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trademaster_secure_pass}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trademaster_user -d trademaster_trading"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: trademaster-redis
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_pass}
    command: >
      --requirepass ${REDIS_PASSWORD:-redis_secure_pass}
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Eureka Service Discovery
  eureka:
    image: steeltoeoss/eureka-server:latest
    container_name: trademaster-eureka
    environment:
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: false
      EUREKA_CLIENT_FETCH_REGISTRY: false
      EUREKA_SERVER_ENABLE_SELF_PRESERVATION: false
    ports:
      - "8761:8761"
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka for event streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: trademaster-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - trademaster-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: trademaster-kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    ports:
      - "9092:9092"
      - "29092:29092"
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # HashiCorp Vault for secrets management
  vault:
    image: hashicorp/vault:latest
    container_name: trademaster-vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_DEV_ROOT_TOKEN:-vault_dev_token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    volumes:
      - vault_data:/vault/data
      - vault_logs:/vault/logs
      - ./config/vault.hcl:/vault/config/vault.hcl:ro
    ports:
      - "8200:8200"
    networks:
      - trademaster-network
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: trademaster-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    ports:
      - "9090:9090"
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: trademaster-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-grafana_secure_pass}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - trademaster-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Trading Service - Main application
  trading-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: ${BUILD_VERSION:-2.0.0}
    container_name: trademaster-trading-service
    environment:
      # Spring profiles
      SPRING_PROFILES_ACTIVE: docker,production
      
      # Database configuration
      POSTGRES_USER: trademaster_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-trademaster_secure_pass}
      
      # Redis configuration  
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_pass}
      
      # Service discovery
      EUREKA_URL: http://eureka:8761/eureka/
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      SSL_ENABLED: false  # Enable for HTTPS
      
      # Monitoring
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,prometheus
      
      # Vault integration
      VAULT_HOST: vault
      VAULT_PORT: 8200
      VAULT_TOKEN: ${VAULT_DEV_ROOT_TOKEN:-vault_dev_token}
      
      # JVM optimization
      JAVA_OPTS: >
        -XX:+UseZGC 
        -XX:+UnlockExperimentalVMOptions 
        -XX:+EnableJVMCI 
        -Xmx3g 
        -Xms2g 
        -Dspring.threads.virtual.enabled=true 
        --enable-preview
        -Dmanagement.endpoint.health.probes.enabled=true
        -Dmanagement.health.readinessState.enabled=true
        -Dmanagement.health.livenessState.enabled=true
    ports:
      - "8083:8083"
      - "9083:9083"  # Management port
    networks:
      - trademaster-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      eureka:
        condition: service_healthy
      kafka:
        condition: service_healthy
      vault:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4G
        reservations:
          cpus: '2'
          memory: 2G
    volumes:
      - ./logs:/opt/trademaster/logs
      - ./ssl:/opt/trademaster/ssl:ro

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: trademaster-nginx
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl/certs:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - trademaster-network
    depends_on:
      - trading-service
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5

networks:
  trademaster-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  vault_data:
    driver: local
  vault_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local